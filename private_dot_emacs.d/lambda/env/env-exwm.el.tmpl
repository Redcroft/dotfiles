;;; -*- lexical-binding: t -*-

(use-package exwm
  :if (string= (getenv "EXWM_ENABLE") "t")
  :config
  (use-package pinentry
    :config (pinentry-start))
  (setq battery-update-interval 15
        battery-mode-line-format "[%p%% %t]"
        display-time-default-load-average nil
        display-time-format "[%b %d %I:%M%p]"
        exwm-workspace-number 10
        exwm-input-simulation-keys
        '(([?\C-b] . [left])
          ([?\C-f] . [right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete]))
        exwm-input-global-keys
        `(([?\s-r] . exwm-reset)
          ([?\s-w] . exwm-workspace-switch)
          ;; ([XF86MonBrightnessUp] . ignore)
          ;; ([XF86MonBrightnessDown] . ignore)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

  (defun my/exwm-startup ()
    (lambda)
    (exwm-init)
    (sleep-for 0 200)
    (exwm-workspace-switch-create 9)
    (sleep-for 0 200)
    (exwm-workspace-switch 1)
    (start-process "" nil "dunst" "&")
    ;;(dashboard-open)
    )
  (add-hook 'emacs-startup-hook 'my/exwm-startup)
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer (concat "*EXWM* " exwm-class-name)))))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (or (not exwm-instance-name)
                        (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-title))))
  (add-hook 'exwm-floating-setup-hook 'exwm-layout-hide-mode-line)
  (add-hook 'exwm-floating-exit-hook  'exwm-layout-show-mode-line)
  (exwm-input-set-key (kbd "s-p")
                      (lambda (command)
                        (interactive (list (read-shell-command "$ ")))
                        (start-process-shell-command command nil command)))
  (exwm-input-set-key (kbd "s-<return>")
                      (lambda () (interactive) (eshell)))
  (exwm-input-set-key (kbd "s-W")
                      (lambda () (interactive) (start-process "" nil "qutebrowser")))
  (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
                      (lambda () (interactive) (start-process "" nil "pactl" "--" "set-sink-volume" "0" "+2%")))
  (exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
                      (lambda () (interactive) (start-process "" nil "pactl" "--" "set-sink-volume" "0" "-2%")))
  (exwm-input-set-key (kbd "<XF86AudioMute>")
                      (lambda () (interactive) (start-process "" nil "pactl" "--" "set-sink-mute" "0" "toggle")))
  (exwm-input-set-key (kbd "<XF86MonBrightnessUp>")
                      (lambda () (interactive) (start-process "" nil "blight" "inc" "5")))
  (exwm-input-set-key (kbd "<XF86MonBrightnessDown>")
                      (lambda () (interactive) (start-process "" nil "blight" "dec" "5")))
  (exwm-input-set-key (kbd "s-<XF86MonBrightnessUp>")
                      (lambda () (interactive) (start-process "" nil "blight" "set" "255")))
  (exwm-input-set-key (kbd "s-<XF86MonBrightnessDown>")
                      (lambda () (interactive) (start-process "" nil "blight" "set" "25")))
  (exwm-input-set-key (kbd "s-<up>")
                      (lambda () (interactive) (enlarge-window-horizontally 2)))
  (exwm-input-set-key (kbd "s-<down>")
                      (lambda () (interactive) (shrink-window-horizontally 2)))
  (exwm-input-set-key (kbd "s-f")
                      (lambda () (interactive) (windmove-right)))
  (exwm-input-set-key (kbd "s-b")
                      (lambda () (interactive) (windmove-left)))
  (exwm-input-set-key (kbd "C-s-f")
                      (lambda () (interactive) (windmove-swap-states-right)))
  (exwm-input-set-key (kbd "C-s-b")
                      (lambda () (interactive) (windmove-swap-states-left)))
  (exwm-input-set-key (kbd "s-z")
                      (lambda ()
                        (interactive)
                        (let ((d (format-time-string "%H:%m%p"))
                              (b (battery-format battery-echo-area-format (funcall battery-status-function))))
                          (message "%s\t%s" d b))))
  (display-time-mode 1)
  (display-battery-mode 1)
  (exwm-input--update-global-prefix-keys)
  )

(provide 'env-exwm)
