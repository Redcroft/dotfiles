config.load_autoconfig()

c.auto_save.session = True
c.completion.shrink = True
c.content.notifications.enabled = True
c.content.blocking.whitelist = ["youtube.com"]
c.downloads.location.prompt = False
c.window.title_format = "qutebrowser"
c.hints.chars = "arstneio"
c.url.searchengines = {
    'DEFAULT':  'https://bing.com/search?q={}',
    'az': 'https://www.amazon.co.uk/s?k={}',
    'g':  'https://google.com/search?hl=en&q={}',
    'yt': 'https://youtube.com/results?search_query={}',
    'yti': 'https://yewtu.be/search?q={}'
}

c.colors.webpage.preferred_color_scheme = "dark"
c.colors.webpage.darkmode.enabled = False
c.colors.webpage.darkmode.policy.images = "smart-simple"

config.bind("<Ctrl-tab>", "tab-next")
config.bind("<Ctrl-Shift-tab>", "tab-prev")
config.bind("m", "spawn mpv --hwdec=auto --ytdl-format=bestvideo[height<=?720]+bestaudio/best {url}")
config.bind("M", "hint links spawn mpv --hwdec=auto --ytdl-format=bestvideo[height<=?720]+bestaudio/best {hint-url}")
config.bind("<z><l>", "spawn --userscript qute-rbw")
config.bind("<z><u>", "spawn --userscript qute-rbw --username-only")
config.bind("<z><p>", "spawn --userscript qute-rbw --password-only")
config.bind("<Ctrl-f>", "scroll right")
config.bind("<Ctrl-b>", "scroll left")
config.bind("<Ctrl-n>", "scroll down")
config.bind("<Ctrl-p>", "scroll up")
config.bind("<z><r>", "config-source ~/.config/qutebrowser/config.py")

colors = {
    "background": "#{{ (index .colors .chezmoi.hostname).base00 }}",
    "foreground": "#{{ (index .colors .chezmoi.hostname).base05 }}",
    "comment": "#{{ (index .colors .chezmoi.hostname).base03 }}",
    "red": "#{{ (index .colors .chezmoi.hostname).base08 }}",
    "green": "#{{ (index .colors .chezmoi.hostname).base0B }}",
    "yellow": "#{{ (index .colors .chezmoi.hostname).base0A }}",
    "blue": "#{{ (index .colors .chezmoi.hostname).base0D }}",
    "magenta": "#{{ (index .colors .chezmoi.hostname).base0E }}",
    "cyan": "#{{ (index .colors .chezmoi.hostname).base0C }}",
    }

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
c.colors.completion.fg = colors["comment"]

# Background color of the completion widget for odd rows.
c.colors.completion.odd.bg = colors["background"]

# Background color of the completion widget for even rows.
c.colors.completion.even.bg = colors["background"]

# Foreground color of completion widget category headers.
c.colors.completion.category.fg = colors["foreground"]

# Background color of the completion widget category headers.
c.colors.completion.category.bg = colors["background"]

# Top border color of the completion widget category headers.
c.colors.completion.category.border.top = colors["background"]

# Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = colors["background"]

# Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = colors["background"]

# Background color of the selected completion item.
c.colors.completion.item.selected.bg = colors["green"]

# Top border color of the selected completion item.
c.colors.completion.item.selected.border.top = colors["yellow"]

# Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = colors["yellow"]

# Foreground color of the matched text in the selected completion item.
c.colors.completion.item.selected.match.fg = colors["green"]

# Foreground color of the matched text in the completion.
c.colors.completion.match.fg = colors["green"]

# Color of the scrollbar handle in the completion view.
c.colors.completion.scrollbar.fg = colors["foreground"]

# Color of the scrollbar in the completion view.
c.colors.completion.scrollbar.bg = colors["background"]

# Background color of disabled items in the context menu.
c.colors.contextmenu.disabled.bg = colors["comment"]

# Foreground color of disabled items in the context menu.
c.colors.contextmenu.disabled.fg = colors["green"]

# Background color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.bg = colors["background"]

# Foreground color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.fg =  colors["comment"]

# Background color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.bg = colors["green"]

#Foreground color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.fg = colors["background"]

# Background color for the download bar.
c.colors.downloads.bar.bg = colors["background"]

# Color gradient start for download text.
c.colors.downloads.start.fg = colors["background"]

# Color gradient start for download backgrounds.
c.colors.downloads.start.bg = colors["foreground"]

# Color gradient end for download text.
c.colors.downloads.stop.fg = colors["background"]

# Color gradient stop for download backgrounds.
c.colors.downloads.stop.bg = colors["foreground"]

# Foreground color for downloads with errors.
c.colors.downloads.error.fg = colors["red"]

# Font color for hints.
c.colors.hints.fg = colors["background"]

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
c.colors.hints.bg = colors["cyan"]

# Font color for the matched part of hints.
c.colors.hints.match.fg = colors["magenta"]

# Text color for the keyhint widget.
c.colors.keyhint.fg = colors["foreground"]

# Highlight color for keys to complete the current keychain.
c.colors.keyhint.suffix.fg = colors["magenta"]

# Background color of the keyhint widget.
c.colors.keyhint.bg = colors["background"]

# Foreground color of an error message.
c.colors.messages.error.fg = colors["background"]

# Background color of an error message.
c.colors.messages.error.bg = colors["red"]

# Border color of an error message.
c.colors.messages.error.border = colors["red"]

# Foreground color of a warning message.
c.colors.messages.warning.fg = colors["background"]

# Background color of a warning message.
c.colors.messages.warning.bg = colors["yellow"]

# Border color of a warning message.
c.colors.messages.warning.border = colors["yellow"]

# Foreground color of an info message.
c.colors.messages.info.fg = colors["foreground"]

# Background color of an info message.
c.colors.messages.info.bg = colors["background"]

# Border color of an info message.
c.colors.messages.info.border = colors["background"]

# Foreground color for prompts.
c.colors.prompts.fg = colors["comment"]

# Border used around UI elements in prompts.
c.colors.prompts.border = colors["background"]

# Background color for prompts.
c.colors.prompts.bg = colors["background"]

# Background color for the selected item in filename prompts.
c.colors.prompts.selected.bg = colors["foreground"]

# Foreground color for the selected item in filename prompts.
c.colors.prompts.selected.fg = colors["background"]

# Foreground color of the statusbar.
c.colors.statusbar.normal.fg = colors["foreground"]

# Background color of the statusbar.
c.colors.statusbar.normal.bg = colors["background"]

# Foreground color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = colors["green"]

# Background color of the statusbar in insert mode.
c.colors.statusbar.insert.bg = colors["background"]

# Foreground color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = colors["background"]

# Background color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.bg = colors["background"]

# Foreground color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = colors["magenta"]

# Background color of the statusbar in private browsing mode.
c.colors.statusbar.private.bg = colors["background"]

# Foreground color of the statusbar in command mode.
c.colors.statusbar.command.fg = colors["green"]

# Background color of the statusbar in command mode.
c.colors.statusbar.command.bg = colors["background"]

# Foreground color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = colors["magenta"]

# Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.bg = colors["comment"]

# Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = colors["background"]

# Background color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = colors["yellow"]

# Foreground color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = colors["yellow"]

# Background color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.bg = colors["background"]

# Background color of the progress bar.
c.colors.statusbar.progress.bg = colors["background"]

# Default foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = colors["comment"]

# Foreground color of the URL in the statusbar on error.
c.colors.statusbar.url.error.fg = colors["red"]

# Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = colors["blue"]

# Foreground color of the URL in the statusbar on successful load
# (http).
c.colors.statusbar.url.success.http.fg = colors["cyan"]

# Foreground color of the URL in the statusbar on successful load
# (https).
c.colors.statusbar.url.success.https.fg = colors["green"]

# Foreground color of the URL in the statusbar when there's a warning.
c.colors.statusbar.url.warn.fg = colors["red"]

# Background color of the tab bar.
c.colors.tabs.bar.bg = colors["background"]

# Color gradient start for the tab indicator.
c.colors.tabs.indicator.start = colors["background"]

# Color gradient end for the tab indicator.
c.colors.tabs.indicator.stop = colors["background"]

# Color for the tab indicator on errors.
c.colors.tabs.indicator.error = colors["red"]

# Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = colors["foreground"]

# Background color of unselected odd tabs.
c.colors.tabs.odd.bg = colors["background"]

# Foreground color of unselected even tabs.
c.colors.tabs.even.fg = colors["foreground"]

# Background color of unselected even tabs.
c.colors.tabs.even.bg = colors["background"]

# Background color of pinned unselected even tabs.
c.colors.tabs.pinned.even.bg = colors["cyan"]

# Foreground color of pinned unselected even tabs.
c.colors.tabs.pinned.even.fg = colors["background"]

# Background color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.bg = colors["cyan"]

# Foreground color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.fg = colors["background"]

# Background color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.bg = colors["background"]

# Foreground color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.fg = colors["green"]

# Background color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.bg = colors["background"]

# Foreground color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.fg = colors["green"]

# Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = colors["background"]

# Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = colors["blue"]

# Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = colors["background"]

# Background color of selected even tabs.
c.colors.tabs.selected.even.bg = colors["blue"]
